
[package]
name = "cairo-platinum-prover"
rust-version = "1.66"
version.workspace = true
edition.workspace = true
license.workspace = true

# [[bin]]
# name = "cairo-platinum"
# path = "src/main.rs"

crate-type = ["cdylib", "rlib"]

[dependencies]
rand = "0.8.5"
lambdaworks-math = { git = "https://github.com/lambdaclass/lambdaworks", rev = "af0a479"}
lambdaworks-crypto = { git = "https://github.com/lambdaclass/lambdaworks", rev = "af0a479" }
stark-platinum-prover = { path = "../stark_prover" }
thiserror = "1.0.38"
log = "0.4.17"
bincode = { version = "2.0.0-rc.2", tag = "v2.0.0-rc.2", git = "https://github.com/bincode-org/bincode.git" }
# cairo-vm = { version = "0.6.0", features = ["cairo-1-hints"] }
cairo-vm = { git = "https://github.com/lambdaclass/cairo-vm", rev = "e763cef", default-features = false, features = [
    "cairo-1-hints",
]}
sha3 = "0.10.6"
cairo-lang-starknet = { version = "2.1.0-rc2", default-features = false }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
num-integer = "0.1.45"
itertools = "0.11.0"

# Parallelization crates
rayon = { version = "1.7.0", optional = true }

# Giza prover crates 
giza-core = { git = "https://github.com/lambdaclass/giza", branch = "remove_prints", optional = true }
giza-prover = { git = "https://github.com/lambdaclass/giza", branch = "remove_prints", optional = true }
giza-runner = { git = "https://github.com/lambdaclass/giza", branch = "remove_prints", optional = true }

[dev-dependencies]
proptest = "1.2.0"
hex = "0.4.3"
criterion = "0.4"
env_logger = "*"
test-log = { version = "0.2.11", features = ["log"] }
assert_matches = "1.5.0"
rstest = "0.17.0"
rand = "0.8.5"
wasm-bindgen-test = "0.3.0"

[features]
test_fiat_shamir = []
instruments = []                   # This enables timing prints in prover and verifier
metal = ["lambdaworks-math/metal"]
parallel = ["dep:rayon"]
giza = ["dep:giza-core", "dep:giza-prover", "dep:giza-runner"]

# wasm = ["dep:wasm-bindgen", "dep:serde-wasm-bindgen", "dep:web-sys", "dep:serde_cbor"]

[[bench]]
name = "criterion_prover"
harness = false
metal = ["lambdaworks-math/metal"]

[[bench]]
name = "criterion_prover_70k"
harness = false
metal = ["lambdaworks-math/metal"]

[[bench]]
name = "criterion_verifier"
harness = false
metal = ["lambdaworks-math/metal"]

[[bench]]
name = "criterion_verifier_70k"
harness = false

[[bench]]
name = "criterion_giza"
harness = false
